let config = {"nama":"test","file":{"css":[{"nama":"css.css","url":"css/css.css","konten":"html, body, div, canvas {\r\tmargin: 0px;\r\tpadding: 0px;\r\tbox-sizing: border-box;\r\toverflow-x: hidden;\r\toverflow-y: hidden;\r}\r\rcanvas {\r\tbackground-color: white;\r}\r\rhtml, body {\r\tbackground-color: black;\r}\r"}],"js":[{"nama":"js.js","url":"js/js.js","konten":"\"use strict\";\rlet cellAr = [];\rlet cellMax = 100; //maksimum cell boleh dibuat\rlet peta = [\r    \"XXXXXXXXXX\",\r    \"X        X\",\r    \"X    X   X\",\r    \"X    X   X\",\r    \"X    X   X\",\r    \"X    X   X\",\r    \"X    X   X\",\r    \"X        X\",\r    \"X        X\",\r    \"XXXXXXXXXX\"\r];\rlet canvas;\rlet canvasCtx;\rlet gbrBox;\rlet gbrBola;\r\rwindow.onload = () => {\r    canvas = document.body.querySelector('canvas');\r    canvasCtx = canvas.getContext(\"2d\");\r    gbrBola = document.body.querySelector(\"img#img-bola\");\r    gbrBox = document.body.querySelector(\"img#img-box\");\r    gambarPeta();\r\r    canvas.onclick = (e) => {\r        let posx = Math.floor((e.clientX) / 32);\r        let posy = Math.floor((e.clientY) / 32);\r        bersihkanLayar();\r        let hasil = pfCariJalan(1, 1, posx, posy);\r        gambarPeta();\r        gambarJalan(hasil);\r    };\r};\r\rfunction gambarJalan(hasil) {\r    hasil.forEach((item) => {\r        canvasCtx.drawImage(gbrBola, item[0] * 32, item[1] * 32);\r    });\r}\r\rfunction gambarPeta() {\r    for (let jx = 0; jx < peta.length; jx++) {\r        for (let ix = 0; ix < peta[jx].length; ix++) {\r            if (petaKosong(ix, jx)) {\r            }\r            else {\r                canvasCtx.drawImage(gbrBox, ix * 32, jx * 32);\r            }\r        }\r    }\r}\r\rfunction bersihkanLayar() {\r    canvasCtx.clearRect(0, 0, 360, 640);\r}\r\rfunction petaKosong(x, y) {\r    return (peta[y].charAt(x) == \" \");\r}\r\rfunction petaPosValid(x, y) {\r    if (x < 0)\r        return false;\r    if (y >= peta.length)\r        return false;\r    if (x >= peta[y].length)\r        return false;\r    return petaKosong(x, y);\r}\r\r/**\r * Buka cell\r * @param cellCr cell sekarang\r * @param tx posisi target x\r * @param ty posisi target y\r */\rfunction pfBukaCellBaru(cellCr, tx, ty) {\r    //up\r    if (pfPosBisa(cellCr.x, cellCr.y - 1)) {\r        cellAr.push(cellBuat(cellCr, cellCr.x, cellCr.y - 1, tx, ty));\r    }\r    //right\r    if (pfPosBisa(cellCr.x + 1, cellCr.y)) {\r        cellAr.push(cellBuat(cellCr, cellCr.x + 1, cellCr.y, tx, ty));\r    }\r    //down\r    if (pfPosBisa(cellCr.x, cellCr.y + 1)) {\r        cellAr.push(cellBuat(cellCr, cellCr.x, cellCr.y + 1, tx, ty));\r    }\r    //left\r    if (pfPosBisa(cellCr.x - 1, cellCr.y)) {\r        cellAr.push(cellBuat(cellCr, cellCr.x - 1, cellCr.y, tx, ty));\r    }\r}\r\r/**\r * Merubah hasil kebentuk array yang lebih sederhana\r * @param res Array sumber\r */\rfunction pfRes2Array(res) {\r    let ar = [];\r    res.forEach(cell => {\r        ar.push([cell.x, cell.y]);\r    });\r    return ar;\r}\r\r/**\r * Check sampai tujuan\r * @param x posisi x\r * @param y posisi y\r * @param tx posisi target x\r * @param ty posisi target y\r */\rfunction pfCheckSampaiTujuan(x, y, tx, ty) {\r    if ((x == tx) && (y == ty))\r        return true;\r    return false;\r}\r\r/**\r * Proses mencari jalan\r * @param sx posisi sumber x\r * @param sy posisi sumber y\r * @param tx posisi target x\r * @param ty posisi target y\r */\rfunction pfCariJalan(sx, sy, tx, ty) {\r    let cellCr;\r    let res = [];\r    cellAr = [];\r    //bila posisi tujuan sama dengan awal\r    //kembalikan array kosong\r    if ((sx == tx) && (sy == ty)) {\r        return [];\r    }\r    cellAr.push(cellBuat(null, sx, sy, tx, ty));\r    while (true) {\r        //bila jumlah cell yang dihasilkan melebihi maksimum\r        //kembalikan array kosong\r        if ((cellAr.length >= cellMax)) {\r            return [];\r        }\r        //cari cell yang masih terbuka (Langkah 2)\r        cellCr = cellCariYangTerbuka();\r        //bila ada cell yang masih terbuka\r        if (cellCr) {\r            //ubah status jadi tutup (Langkah 2)\r            cellCr.buka = -1;\r            //check jika sudah sampai tujuan (Langkah 12)\r            if (pfCheckSampaiTujuan(cellCr.x, cellCr.y, tx, ty)) {\r                res = pfTelusurBalik(cellCr);\r                return pfRes2Array(res);\r            }\r            //(Langkah 1)\r            pfBukaCellBaru(cellCr, tx, ty);\r        }\r        else {\r            //Tidak ada cell yang terbuka\r            //Jalur tidak ketemu\r            //Kembalikan array kosong\r            return [];\r        }\r    }\r}\r\r/**\r * Mengecek apakah posisi (ix, jx) bisa dilalui\r * @param x Posisi x\r * @param y Posisi y\r */\rfunction pfPosBisa(x, y) {\r    //check cell\r    if (cellCheckDouble(x, y)) {\r        return false;\r    }\r    //check block peta\r    if (!petaPosValid(x, y)) {\r        return false;\r    }\r    return true;\r}\r\r/**\r * Buat cell baru\r * @param parent Parent cell\r * @param x posisi x\r * @param y posisi y\r * @param tx posisi target x\r * @param ty posisi target y\r */\rfunction cellBuat(parent, x, y, tx, ty) {\r    let cell = {\r        x: x,\r        y: y,\r        buka: 1,\r        jarak: -1,\r        induk: parent,\r    };\r    cell.jarak = Math.abs(tx - x) + Math.abs(ty - y);\r    return cell;\r}\r\r/**\r * Cari cell yang masih terbuka\r */\rfunction cellCariYangTerbuka() {\r    let i = 0;\r    let cell = null;\r    let maxLen;\r    let cellTemp;\r    let len = 0;\r    maxLen = 10000;\r    len = cellAr.length - 1;\r    for (i = len; i >= 0; i--) {\r        cell = cellAr[i];\r        if (1 == cell.buka) {\r            if (cell.jarak < maxLen) {\r                cellTemp = cell;\r                maxLen = cell.jarak;\r            }\r        }\r    }\r    return cellTemp;\r}\r\r/**\r * Check apakah cell sudah ada di daftar, parameter yang dipakai adalah posisi\r * @param x posisi x\r * @param y posisi y\r */\rfunction cellCheckDouble(x, y) {\r    let res = false;\r    cellAr.forEach(cell => {\r        if (cell.x == x && cell.y == y) {\r            res = true;\r        }\r    });\r    return res;\r}\r\rfunction pfTelusurBalik(cell) {\r    let res = [];\r    let i = 0;\r    let cellTemp = null;\r    let cellParent = null;\r    res.unshift(cell);\r    while (true) {\r        //cari parent dari cell yang sedang di check\r        cellParent = null;\r        for (i = 0; i < cellAr.length; i++) {\r            cellTemp = cellAr[i];\r            if (cell.induk == cellTemp) {\r                cellParent = cellTemp;\r                break;\r            }\r        }\r        //parent gak ada, berarti cell sekarang adalah cell awal, penelusuran selesai;\r        if (cellParent == null) {\r            return res;\r        }\r        else {\r            //hasilnya di masukkan ke let res\r            //update cell dengan cellParent\r            res.unshift(cellParent);\r            cell = cellParent;\r        }\r    }\r}\r"}],"html":[{"nama":"index.html","url":"index.html","konten":"\r\n\t<div style=\"display:none\">\r\n\t\t<img src=\"imgs/bola.png\" id=\"img-bola\">\r\n\t\t<img src=\"imgs/box.png\" id=\"img-box\">\r\n\t</div>\r\n\t<canvas id=\"canvas\" width=\"320\" height=\"320\" style=\"width:320px; height:320px\"></canvas>\r\n"}]}}