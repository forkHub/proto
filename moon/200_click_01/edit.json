let config = {"nama":"test","file":{"css":[{"nama":"css.css","url":"css/css.css","konten":"html, body, div, canvas {\r\n\tmargin: 0px;\r\n\tpadding: 0px;\r\n\tbox-sizing: border-box;\r\n\toverflow-x: hidden;\r\n\toverflow-y: hidden;\r\n}\r\n\r\ncanvas {\r\n\tbackground-color: white;\r\n}\r\n\r\nhtml, body {\r\n\tbackground-color: black;\r\n}\r\n"}],"js":[{"nama":"js.js","url":"js/js.js","konten":"\"use strict\";\r\nlet cellAr = [];\r\nlet cellMax = 100; //maksimum cell boleh dibuat\r\nlet peta = [\r\n    \"XXXXXXXXXX\",\r\n    \"X        X\",\r\n    \"X    X   X\",\r\n    \"X    X   X\",\r\n    \"X    X   X\",\r\n    \"X    X   X\",\r\n    \"X    X   X\",\r\n    \"X        X\",\r\n    \"X        X\",\r\n    \"XXXXXXXXXX\"\r\n];\r\nlet canvas;\r\nlet canvasCtx;\r\nlet gbrBox;\r\nlet gbrBola;\r\nwindow.onload = () => {\r\n    canvas = document.body.querySelector('canvas');\r\n    canvasCtx = canvas.getContext(\"2d\");\r\n    gbrBola = document.body.querySelector(\"img#img-bola\");\r\n    gbrBox = document.body.querySelector(\"img#img-box\");\r\n    gambarPeta();\r\n    canvas.onclick = (e) => {\r\n        let posx = Math.floor((e.clientX) / 32);\r\n        let posy = Math.floor((e.clientY) / 32);\r\n        bersihkanLayar();\r\n        let hasil = pfCariJalan(1, 1, posx, posy);\r\n        gambarPeta();\r\n        gambarJalan(hasil);\r\n    };\r\n};\r\nfunction gambarJalan(hasil) {\r\n    hasil.forEach((item) => {\r\n        canvasCtx.drawImage(gbrBola, item[0] * 32, item[1] * 32);\r\n    });\r\n}\r\nfunction gambarPeta() {\r\n    for (let jx = 0; jx < peta.length; jx++) {\r\n        for (let ix = 0; ix < peta[jx].length; ix++) {\r\n            if (petaKosong(ix, jx)) {\r\n            }\r\n            else {\r\n                canvasCtx.drawImage(gbrBox, ix * 32, jx * 32);\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction bersihkanLayar() {\r\n    canvasCtx.clearRect(0, 0, 360, 640);\r\n}\r\nfunction petaKosong(x, y) {\r\n    return (peta[y].charAt(x) == \" \");\r\n}\r\nfunction petaPosValid(x, y) {\r\n    if (x < 0)\r\n        return false;\r\n    if (y >= peta.length)\r\n        return false;\r\n    if (x >= peta[y].length)\r\n        return false;\r\n    return petaKosong(x, y);\r\n}\r\n/**\r\n * Buka cell\r\n * @param cellCr cell sekarang\r\n * @param tx posisi target x\r\n * @param ty posisi target y\r\n */\r\nfunction pfBukaCellBaru(cellCr, tx, ty) {\r\n    //up\r\n    if (pfPosBisa(cellCr.x, cellCr.y - 1)) {\r\n        cellAr.push(cellBuat(cellCr, cellCr.x, cellCr.y - 1, tx, ty));\r\n    }\r\n    //right\r\n    if (pfPosBisa(cellCr.x + 1, cellCr.y)) {\r\n        cellAr.push(cellBuat(cellCr, cellCr.x + 1, cellCr.y, tx, ty));\r\n    }\r\n    //down\r\n    if (pfPosBisa(cellCr.x, cellCr.y + 1)) {\r\n        cellAr.push(cellBuat(cellCr, cellCr.x, cellCr.y + 1, tx, ty));\r\n    }\r\n    //left\r\n    if (pfPosBisa(cellCr.x - 1, cellCr.y)) {\r\n        cellAr.push(cellBuat(cellCr, cellCr.x - 1, cellCr.y, tx, ty));\r\n    }\r\n}\r\n/**\r\n * Merubah hasil kebentuk array yang lebih sederhana\r\n * @param res Array sumber\r\n */\r\nfunction pfRes2Array(res) {\r\n    let ar = [];\r\n    res.forEach(cell => {\r\n        ar.push([cell.x, cell.y]);\r\n    });\r\n    return ar;\r\n}\r\n/**\r\n * Check sampai tujuan\r\n * @param x posisi x\r\n * @param y posisi y\r\n * @param tx posisi target x\r\n * @param ty posisi target y\r\n */\r\nfunction pfCheckSampaiTujuan(x, y, tx, ty) {\r\n    if ((x == tx) && (y == ty))\r\n        return true;\r\n    return false;\r\n}\r\n/**\r\n * Proses mencari jalan\r\n * @param sx posisi sumber x\r\n * @param sy posisi sumber y\r\n * @param tx posisi target x\r\n * @param ty posisi target y\r\n */\r\nfunction pfCariJalan(sx, sy, tx, ty) {\r\n    let cellCr;\r\n    let res = [];\r\n    cellAr = [];\r\n    //bila posisi tujuan sama dengan awal\r\n    //kembalikan array kosong\r\n    if ((sx == tx) && (sy == ty)) {\r\n        return [];\r\n    }\r\n    cellAr.push(cellBuat(null, sx, sy, tx, ty));\r\n    while (true) {\r\n        //bila jumlah cell yang dihasilkan melebihi maksimum\r\n        //kembalikan array kosong\r\n        if ((cellAr.length >= cellMax)) {\r\n            return [];\r\n        }\r\n        //cari cell yang masih terbuka (Langkah 2)\r\n        cellCr = cellCariYangTerbuka();\r\n        //bila ada cell yang masih terbuka\r\n        if (cellCr) {\r\n            //ubah status jadi tutup (Langkah 2)\r\n            cellCr.buka = -1;\r\n            //check jika sudah sampai tujuan (Langkah 12)\r\n            if (pfCheckSampaiTujuan(cellCr.x, cellCr.y, tx, ty)) {\r\n                res = pfTelusurBalik(cellCr);\r\n                return pfRes2Array(res);\r\n            }\r\n            //(Langkah 1)\r\n            pfBukaCellBaru(cellCr, tx, ty);\r\n        }\r\n        else {\r\n            //Tidak ada cell yang terbuka\r\n            //Jalur tidak ketemu\r\n            //Kembalikan array kosong\r\n            return [];\r\n        }\r\n    }\r\n}\r\n/**\r\n * Mengecek apakah posisi (ix, jx) bisa dilalui\r\n * @param x Posisi x\r\n * @param y Posisi y\r\n */\r\nfunction pfPosBisa(x, y) {\r\n    //check cell\r\n    if (cellCheckDouble(x, y)) {\r\n        return false;\r\n    }\r\n    //check block peta\r\n    if (!petaPosValid(x, y)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Buat cell baru\r\n * @param parent Parent cell\r\n * @param x posisi x\r\n * @param y posisi y\r\n * @param tx posisi target x\r\n * @param ty posisi target y\r\n */\r\nfunction cellBuat(parent, x, y, tx, ty) {\r\n    let cell = {\r\n        x: x,\r\n        y: y,\r\n        buka: 1,\r\n        jarak: -1,\r\n        induk: parent,\r\n    };\r\n    cell.jarak = Math.abs(tx - x) + Math.abs(ty - y);\r\n    return cell;\r\n}\r\n/**\r\n * Cari cell yang masih terbuka\r\n */\r\nfunction cellCariYangTerbuka() {\r\n    let i = 0;\r\n    let cell = null;\r\n    let maxLen;\r\n    let cellTemp;\r\n    let len = 0;\r\n    maxLen = 10000;\r\n    len = cellAr.length - 1;\r\n    for (i = len; i >= 0; i--) {\r\n        cell = cellAr[i];\r\n        if (1 == cell.buka) {\r\n            if (cell.jarak < maxLen) {\r\n                cellTemp = cell;\r\n                maxLen = cell.jarak;\r\n            }\r\n        }\r\n    }\r\n    return cellTemp;\r\n}\r\n/**\r\n * Check apakah cell sudah ada di daftar, parameter yang dipakai adalah posisi\r\n * @param x posisi x\r\n * @param y posisi y\r\n */\r\nfunction cellCheckDouble(x, y) {\r\n    let res = false;\r\n    cellAr.forEach(cell => {\r\n        if (cell.x == x && cell.y == y) {\r\n            res = true;\r\n        }\r\n    });\r\n    return res;\r\n}\r\nfunction pfTelusurBalik(cell) {\r\n    let res = [];\r\n    let i = 0;\r\n    let cellTemp = null;\r\n    let cellParent = null;\r\n    res.unshift(cell);\r\n    while (true) {\r\n        //cari parent dari cell yang sedang di check\r\n        cellParent = null;\r\n        for (i = 0; i < cellAr.length; i++) {\r\n            cellTemp = cellAr[i];\r\n            if (cell.induk == cellTemp) {\r\n                cellParent = cellTemp;\r\n                break;\r\n            }\r\n        }\r\n        //parent gak ada, berarti cell sekarang adalah cell awal, penelusuran selesai;\r\n        if (cellParent == null) {\r\n            return res;\r\n        }\r\n        else {\r\n            //hasilnya di masukkan ke let res\r\n            //update cell dengan cellParent\r\n            res.unshift(cellParent);\r\n            cell = cellParent;\r\n        }\r\n    }\r\n}\r\n"}],"html":[{"nama":"index.html","url":"index.html","konten":"\r\n\t<div style=\"display:none\">\r\n\t\t<img src=\"imgs/bola.png\" id=\"img-bola\">\r\n\t\t<img src=\"imgs/box.png\" id=\"img-box\">\r\n\t</div>\r\n\t<canvas id=\"canvas\" width=\"320\" height=\"320\" style=\"width:320px; height:320px\"></canvas>\r\n"}]}}